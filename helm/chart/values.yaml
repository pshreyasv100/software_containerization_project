namespace: movies



api:

  app: inventory-api

  deployment:
    labelName: inventory-api
    replicaCount: 1
    containerName: inventory-api-container
    image: localhost:32000/inventory-api:v1
  


  service:
    appName: inventory-api-service
    serviceType: NodePort
    port: 8081
    targetPort: 5000
    nodePort: 30008
    selectorApp: inventory-api
    containerPort: 5000
    configMapRef: postgres-config
    secretName: postgres-secret


   # values.yaml
  ingress:
    name: inventory-api-ingress
    cors:
      enabled: "true"
      allowedMethods: "PUT, GET, POST, OPTIONS"
      allowedOrigin: "*"
      allowedCredentials: "true"

    certManager:
      issuer: my-ca-issuer
      commonName: movies.com

    hostname: movies.com
    path: "/"
    pathType: Prefix
    servicePort: 8081
    certSecretName: myingress-cert
 



db:
  app: postgres

  deployment:
    replicas: 1
    appName: postgres
    containerName: postgres-container
    image: postgres:13.1-alpine
    imagePullPolicy: IfNotPresent
    containerPort: 5432
    configMapRef: postgres-config
    secretName: postgres-secret
    mountPath: /opt/postgre/data
    volumeName: postgredb
    postStartCommand: sleep 20 && PGPASSWORD=$POSTGRES_PASSWORD psql $POSTGRES_DB -U $POSTGRES_USER -c 'CREATE TABLE IF NOT EXISTS movie (  id SERIAL PRIMARY KEY, title VARCHAR NOT NULL, genre VARCHAR NOT NULL)'
    persistentVolumeClaim: postgres-pv-claim

  service:
    appName: postgres
    type: NodePort
    port: 5432
    nodePort: 30001
    
  storage:
    appName: postgres
    type: local
    storageClassName: microk8s-hostpath
    capacity: 5Gi
    accessModes: ReadWriteMany
    path: "/opt/postgres/data"

  config:
    appName: postgres
    POSTGRES_DB: postgresdb
    POSTGRES_USER: postgresadmin
    POSTGRES_PORT: 5432
    POSTGRES_HOST: postgres-service

  secret:
    POSTGRES_PASSWORD: YWRtaW4xMjMK

