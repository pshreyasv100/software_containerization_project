microk8s ctr images ls |grep inventory-ui

sudo docker push localhost:32000/inventory-api:v1
sudo docker push localhost:32000/inventory-ui:v1



microk8s ctr images rm localhost:32000/inventory-api:v1

microk8s ctr images rm localhost:32000/inventory-ui:v1


microk8s ctr images rm *

----

postgres 
psql -h localhost -U postgresadmin --password -p 30001 postgresdb

- ip address of node 
kubectl get nodes -o wide


---

curl http://192.168.0.100:30008/


kubectl get pods -l app=inventory-api 


--- ---------------------------------------------
generating tls certificate

openssl req –x509 –newkey rsa:4090 –keyout key.pem –out cert.pem –days 365 –nodes

---
creating a secret for the certificate
kubectl create secret tls my-tls-secret --cert=cert.pem --key=key.pem


--------------------------------------------------
setting up tls
microk8s disable ingress

my-tls-secret
microk8s enable ingress:default-ssl-certificate=<namespace_name>/<secret_name>

microk8s enable ingress:default-ssl-certificate=default/my-tls-secret

--------------------------------------------
alternative using cert manager

You can install cert-manager with:
kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.11.0/cert-manager.yaml
You must uninstall it with the same yaml file:
kubectl delete -f https://github.com/cert-manager/cert-manager/releases/download/v1.11.0/cert-manager.yaml
On Micro8s, you can enable it with:
microk8s enable cert-manager





kubectl apply -f self-signed-issuer.yaml
kubectl apply -f self-signed-cluster-issuer.yaml
kubectl apply -f root-ca.yaml
kubectl apply -f ca-issuer.yaml
kubectl apply -f inventory-api-ingress.yaml



-----------

creating a user in microk8s
in tokens.csv

$openssl rand -base64 48
+T8zFhHQVHX/NfUCS/x71I2nUMH5fopX9TS1VOI6bm0DE0c7GbwZFBH1MSy23Vkr

testing connection to kubernetes api with static token
curl -X GET https://127.0.0.1:16443/api --header "Authorization: Bearer +T8zFhHQVHX/NfUCS/x71I2nUMH5fopX9TS1VOI6bm0DE0c7GbwZFBH1MSy23Vkr" --insecure


checking user permissions
------------------------
kubectl auth can-i list pod --namespace default --as shreyas
kubectl auth can-i list pod --namespace default --as shreyas

checking user permission for cluster role
-----------------------------------------
kubectl auth can-i list secret --namespace default --as shreyas
kubectl auth can-i list secret --namespace cert-manager --as shreyas


kubectl auth can-i list pod --namespace default --as shreyas
kubectl auth can-i list pod --namespace default --as shreyas


------------------------------------------------------------------------


dry run of chart

helm install --dry-run --debug ./chart  --generate-name


-------------------------------------------------------------------------------

gcloud commands 


- Find the name of the cluster: You can use the following command to find the name of the cluster:

$gcloud container clusters list




- Get the credentials for the cluster: You can use the following command to get the credentials for the cluster:

gcloud container clusters get-credentials <cluster-name>
gcloud container clusters get-credentials software-containerization




- UI

sudo docker run -d -p 8888:80 angular-app:v1